#include <PubSubClient.h>
#include <ESP8266WiFi.h>

//DEFINES
#define TOPIC_SUBSCRIBE        "yale.uniandes.ml337.key"
#define TOPIC_PUBLISH          "yale.uniandes.ml337.alarm"
#define SIZE_BUFFER_DATA       50

//VARIABLES
const char* idDevice = "ISIS2503";
boolean     stringComplete = false;
boolean     init_flag = false;
String      inputString = "";
char        bufferData [SIZE_BUFFER_DATA];

// CLIENTE WIFI & MQTT
WiFiClient    clientWIFI;
PubSubClient  clientMQTT(clientWIFI);

// CONFIG SECURITY - SSL
unsigned char m2mqtt_ca_bin_crt[] = {
  0x30, 0x82, 0x04, 0x03, 0x30, 0x82, 0x02, 0xeb, 0xa0, 0x03, 0x02, 0x01,
  0x02, 0x02, 0x09, 0x00, 0xc2, 0x0a, 0x8f, 0x40, 0xb7, 0x07, 0x53, 0x79,
  0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01,
  0x0b, 0x05, 0x00, 0x30, 0x81, 0x97, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03,
  0x55, 0x04, 0x06, 0x13, 0x02, 0x43, 0x4f, 0x31, 0x0f, 0x30, 0x0d, 0x06,
  0x03, 0x55, 0x04, 0x08, 0x0c, 0x06, 0x42, 0x6f, 0x67, 0x6f, 0x74, 0x61,
  0x31, 0x0f, 0x30, 0x0d, 0x06, 0x03, 0x55, 0x04, 0x07, 0x0c, 0x06, 0x42,
  0x6f, 0x67, 0x6f, 0x74, 0x61, 0x31, 0x11, 0x30, 0x0f, 0x06, 0x03, 0x55,
  0x04, 0x0a, 0x0c, 0x08, 0x55, 0x6e, 0x69, 0x61, 0x6e, 0x64, 0x65, 0x73,
  0x31, 0x14, 0x30, 0x12, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x0c, 0x0b, 0x49,
  0x6e, 0x67, 0x65, 0x72, 0x6e, 0x69, 0x65, 0x72, 0x69, 0x61, 0x31, 0x12,
  0x30, 0x10, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x09, 0x41, 0x72, 0x71,
  0x75, 0x69, 0x53, 0x6f, 0x66, 0x74, 0x31, 0x29, 0x30, 0x27, 0x06, 0x09,
  0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x09, 0x01, 0x16, 0x1a, 0x6d,
  0x6a, 0x2e, 0x6a, 0x61, 0x69, 0x6d, 0x65, 0x31, 0x30, 0x40, 0x75, 0x6e,
  0x69, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x63,
  0x6f, 0x30, 0x1e, 0x17, 0x0d, 0x31, 0x38, 0x30, 0x34, 0x32, 0x35, 0x30,
  0x30, 0x33, 0x31, 0x35, 0x32, 0x5a, 0x17, 0x0d, 0x32, 0x38, 0x30, 0x34,
  0x32, 0x32, 0x30, 0x30, 0x33, 0x31, 0x35, 0x32, 0x5a, 0x30, 0x81, 0x97,
  0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x43,
  0x4f, 0x31, 0x0f, 0x30, 0x0d, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x06,
  0x42, 0x6f, 0x67, 0x6f, 0x74, 0x61, 0x31, 0x0f, 0x30, 0x0d, 0x06, 0x03,
  0x55, 0x04, 0x07, 0x0c, 0x06, 0x42, 0x6f, 0x67, 0x6f, 0x74, 0x61, 0x31,
  0x11, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x08, 0x55, 0x6e,
  0x69, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x31, 0x14, 0x30, 0x12, 0x06, 0x03,
  0x55, 0x04, 0x0b, 0x0c, 0x0b, 0x49, 0x6e, 0x67, 0x65, 0x72, 0x6e, 0x69,
  0x65, 0x72, 0x69, 0x61, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55, 0x04,
  0x03, 0x0c, 0x09, 0x41, 0x72, 0x71, 0x75, 0x69, 0x53, 0x6f, 0x66, 0x74,
  0x31, 0x29, 0x30, 0x27, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d,
  0x01, 0x09, 0x01, 0x16, 0x1a, 0x6d, 0x6a, 0x2e, 0x6a, 0x61, 0x69, 0x6d,
  0x65, 0x31, 0x30, 0x40, 0x75, 0x6e, 0x69, 0x61, 0x6e, 0x64, 0x65, 0x73,
  0x2e, 0x65, 0x64, 0x75, 0x2e, 0x63, 0x6f, 0x30, 0x82, 0x01, 0x22, 0x30,
  0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01,
  0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02,
  0x82, 0x01, 0x01, 0x00, 0xbe, 0xd2, 0xb6, 0x13, 0x6e, 0x87, 0x54, 0x70,
  0xc0, 0xee, 0x7e, 0x5a, 0x58, 0x52, 0xb1, 0xbc, 0x52, 0x10, 0xef, 0x5a,
  0xdb, 0xd8, 0xe2, 0x9f, 0x3f, 0x0e, 0x4b, 0xe8, 0x06, 0x78, 0xb1, 0x24,
  0x3c, 0x99, 0x2d, 0x92, 0x23, 0x1e, 0x2b, 0xc7, 0xed, 0x3c, 0x2d, 0x60,
  0x74, 0x75, 0xd4, 0x2c, 0xc8, 0x06, 0xff, 0x04, 0xc1, 0xeb, 0x1e, 0x99,
  0xcc, 0x13, 0xb8, 0x98, 0x40, 0x1d, 0x0f, 0x60, 0x83, 0x95, 0xca, 0x7d,
  0x11, 0xf0, 0x39, 0xba, 0x31, 0x75, 0x37, 0xfe, 0xd1, 0xc7, 0x4d, 0xd7,
  0xe6, 0xba, 0x95, 0x72, 0xd6, 0xf2, 0x2d, 0x08, 0x8f, 0x86, 0x7b, 0x7a,
  0x20, 0xb1, 0x5e, 0x9c, 0x6c, 0x50, 0xf0, 0xc7, 0x4d, 0x79, 0xe3, 0xe5,
  0xa2, 0x73, 0xe4, 0xde, 0x7b, 0x9d, 0x95, 0x31, 0x15, 0xec, 0xda, 0xe9,
  0x08, 0x94, 0x95, 0x2d, 0xa1, 0x7b, 0x8e, 0x83, 0x67, 0xe9, 0x0d, 0xb2,
  0x8b, 0x8d, 0x52, 0xeb, 0xd8, 0x41, 0xfd, 0xf5, 0x37, 0xa0, 0x73, 0xbf,
  0x15, 0xc2, 0x55, 0xc4, 0x43, 0x23, 0xa3, 0x8a, 0xa2, 0xc4, 0x63, 0x07,
  0xae, 0x74, 0x6c, 0x9e, 0x2c, 0x04, 0x2c, 0xd6, 0x26, 0x2e, 0xc4, 0x9f,
  0xf7, 0x1c, 0x35, 0x25, 0x1c, 0x86, 0x2c, 0xec, 0x99, 0x95, 0xe4, 0x9a,
  0x0f, 0x60, 0x03, 0x35, 0xca, 0xba, 0x46, 0x78, 0x73, 0x2d, 0xc8, 0x0a,
  0x34, 0x4c, 0xb3, 0xb0, 0x85, 0x61, 0x34, 0x54, 0x17, 0x83, 0x8a, 0x77,
  0x7c, 0x95, 0xf1, 0x1a, 0x8c, 0x18, 0x16, 0x0a, 0x1a, 0xa8, 0xe5, 0x85,
  0x22, 0x60, 0x2b, 0x18, 0x0c, 0x29, 0x10, 0x50, 0x95, 0x4d, 0x0d, 0xb0,
  0x3b, 0xbc, 0x53, 0xbd, 0xba, 0x49, 0xea, 0xf9, 0xa7, 0x15, 0x71, 0xc0,
  0xe4, 0x54, 0xa3, 0x22, 0xef, 0x52, 0xea, 0x56, 0xa7, 0x64, 0x4e, 0x2b,
  0x94, 0xe6, 0x0b, 0x36, 0x84, 0x0b, 0x1a, 0xd1, 0x02, 0x03, 0x01, 0x00,
  0x01, 0xa3, 0x50, 0x30, 0x4e, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e,
  0x04, 0x16, 0x04, 0x14, 0x60, 0xb8, 0xa5, 0x05, 0x07, 0x90, 0xdc, 0x2a,
  0x45, 0x2a, 0x80, 0x5a, 0xb2, 0x27, 0xc7, 0x3a, 0xcc, 0xb9, 0x72, 0xc4,
  0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80,
  0x14, 0x60, 0xb8, 0xa5, 0x05, 0x07, 0x90, 0xdc, 0x2a, 0x45, 0x2a, 0x80,
  0x5a, 0xb2, 0x27, 0xc7, 0x3a, 0xcc, 0xb9, 0x72, 0xc4, 0x30, 0x0c, 0x06,
  0x03, 0x55, 0x1d, 0x13, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30,
  0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b,
  0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x7d, 0x99, 0xbb, 0xdc, 0xf5,
  0x27, 0x7e, 0x5c, 0xa2, 0xcd, 0x91, 0x20, 0xad, 0x56, 0x01, 0x42, 0x2c,
  0xa8, 0xb0, 0x88, 0x76, 0x76, 0x34, 0xf2, 0xab, 0x4f, 0x39, 0x57, 0x36,
  0x3c, 0x6e, 0xc6, 0x45, 0x39, 0xe9, 0x3d, 0x59, 0xcb, 0x11, 0x77, 0x77,
  0x96, 0xc0, 0xc9, 0xdd, 0x0a, 0xcb, 0xc1, 0x99, 0x66, 0xac, 0xe1, 0x0d,
  0x59, 0x82, 0xb9, 0x11, 0x56, 0x88, 0x17, 0x0e, 0xd0, 0x93, 0x0f, 0x80,
  0x5f, 0x73, 0x3b, 0x1d, 0x90, 0x1c, 0xc2, 0x4c, 0xed, 0x65, 0x8d, 0xc2,
  0x81, 0xa4, 0x79, 0x9e, 0x8a, 0x99, 0xc1, 0xfa, 0xb7, 0x4d, 0x4c, 0x3e,
  0xf1, 0xf1, 0x35, 0x6c, 0xaa, 0xa6, 0x50, 0xcc, 0xc7, 0x99, 0x47, 0x40,
  0x90, 0xa6, 0x4c, 0x85, 0xe8, 0x9c, 0x30, 0x47, 0xb5, 0x39, 0x99, 0x91,
  0x08, 0xbd, 0xe5, 0xb7, 0x5f, 0x2a, 0x29, 0xf4, 0x8e, 0x5b, 0x94, 0x29,
  0x31, 0x9e, 0x5c, 0x33, 0xf3, 0x45, 0x3b, 0x51, 0x16, 0xf1, 0xd0, 0xa0,
  0xd9, 0x37, 0xe9, 0x54, 0xa0, 0x8f, 0x66, 0xf1, 0x02, 0xab, 0x03, 0x1d,
  0xc6, 0x78, 0xd7, 0xd1, 0x09, 0x88, 0x80, 0x9a, 0xeb, 0xb2, 0xba, 0xb7,
  0xf1, 0x06, 0xea, 0x50, 0x18, 0x6f, 0x99, 0x2d, 0x71, 0xd9, 0xa9, 0x09,
  0x91, 0xd9, 0x93, 0x4a, 0x97, 0x29, 0x9f, 0x9d, 0x2c, 0x7c, 0x9a, 0xe6,
  0xa0, 0x66, 0x5f, 0xd9, 0x6e, 0xf1, 0x18, 0xca, 0x1c, 0x7a, 0x15, 0x48,
  0x85, 0x26, 0x19, 0xb4, 0x8a, 0x1f, 0x4b, 0x9b, 0x1f, 0x6e, 0x2f, 0xc0,
  0xd6, 0xcb, 0x30, 0x5a, 0xeb, 0xa4, 0x3b, 0x23, 0x11, 0xf6, 0xa2, 0xc9,
  0x9f, 0x65, 0x67, 0x4d, 0x25, 0xbd, 0x91, 0xab, 0x2b, 0x36, 0x02, 0x85,
  0xb5, 0xc7, 0x4a, 0x4a, 0xf8, 0x92, 0x96, 0xba, 0xc0, 0x82, 0x67, 0x5e,
  0x44, 0x66, 0x1c, 0xaf, 0x5b, 0x18, 0x57, 0x07, 0x6a, 0x6e, 0x6f
};
unsigned int m2mqtt_ca_bin_crt_len = 1031;

// CONFIG WIFI
const char* ssid = "iPhone de Stephannie";
const char* password = "holiwi123";

// CONFIG MQTT
IPAddress serverMQTT (172,24,41,206);
const uint16_t portMQTT = 8083;
const char* usernameMQTT = "microcontrolador";
const char* passwordMQTT = "Isis2503.";

void connectWIFI() {
  // Conectar a la red WiFi
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  if(WiFi.status() != WL_CONNECTED) {
    WiFi.begin(ssid, password);
  }

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println(WiFi.localIP());
}

void reconnectWIFI() {
  // Conectar a la red WiFi
  if(WiFi.status() != WL_CONNECTED) {
    WiFi.begin(ssid, password);
  }

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
  }
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.write(payload, length);
  Serial.println();
}

void setup() {
  Serial.begin(9600);
  inputString.reserve(100);

  clientMQTT.setServer(serverMQTT, portMQTT);
  clientMQTT.setCallback(callback);
  connectWIFI();
  delay(1000);
}

void processData() {
  if (WiFi.status() == WL_CONNECTED) {
    if(init_flag == false) {
      init_flag = true;

      boolean conectMQTT = false;
      if (!clientMQTT.connected()) {
        // if (!clientMQTT.connect(idDevice, usernameMQTT, passwordMQTT)) {
        if (!clientMQTT.connect(idDevice)) {
          conectMQTT = false;
        }
        conectMQTT = true;
      }
      else {
        conectMQTT = true;
      }

      if(conectMQTT) {
        if(clientMQTT.subscribe(TOPIC_SUBSCRIBE)) {
          // Serial.println("Subscribe OK");
        }
      }
    }

    if (stringComplete && clientMQTT.connected()) {
      if(clientMQTT.publish(TOPIC_PUBLISH, bufferData)) {
        inputString = "";
        stringComplete = false;
      }
      init_flag = false;
    }
  }
  else {
    connectWIFI();
    init_flag = false;
  }
  clientMQTT.loop();
}

void receiveData() {
  while (Serial.available()) {
    // get the new byte:
    char inChar = (char)Serial.read();
    // add it to the inputString:
    inputString += inChar;
    // if the incoming character is a newline, set a flag
    // so the main loop can do something about it:
    if (inChar == '\n') {
      inputString.toCharArray(bufferData, SIZE_BUFFER_DATA);
      stringComplete = true;
    }
  }
}

void loop() {
  receiveData();
  processData();
}
