#include <PubSubClient.h>
#include <ESP8266WiFi.h>

//DEFINES
#define TOPIC_SUBSCRIBE        "yale.uniandes.ml337.key"
#define TOPIC_PUBLISH          "alarms.res1.house1"//"yale.uniandes.ml337.alarm"
#define SIZE_BUFFER_DATA       50

//VARIABLES
const char* idDevice = "ISIS2503";
boolean     stringComplete = false;
boolean     init_flag = false;
String      inputString = "";
char        bufferData [SIZE_BUFFER_DATA];

// CLIENTE WIFI & MQTT
WiFiClientSecure    clientWIFI;
PubSubClient  clientMQTT(clientWIFI);

// CONFIG WIFI
const char* ssid = "isis2503";
const char* password = "Yale2018";

// CONFIG MQTT
unsigned char m2mqtt_ca_bin_crt[] = {
  0x4d, 0x49, 0x49, 0x44, 0x2b, 0x7a, 0x43, 0x43, 0x41, 0x75, 0x4f, 0x67, 0x41,
  0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x4a, 0x41, 0x4d, 0x52, 0x73, 0x45, 0x63,
  0x53, 0x64, 0x47, 0x43, 0x7a, 0x4c, 0x4d, 0x41, 0x30, 0x47, 0x43, 0x53, 0x71,
  0x47, 0x53, 0x49, 0x62, 0x33, 0x44, 0x51, 0x45, 0x42, 0x43, 0x77, 0x55, 0x41,
  0x4d, 0x49, 0x47, 0x54, 0x4d, 0x51, 0x73, 0x77, 0x43, 0x51, 0x59, 0x44, 0x0a,
  0x56, 0x51, 0x51, 0x47, 0x45, 0x77, 0x4a, 0x44, 0x54, 0x7a, 0x45, 0x50, 0x4d,
  0x41, 0x30, 0x47, 0x41, 0x31, 0x55, 0x45, 0x43, 0x41, 0x77, 0x47, 0x51, 0x6d,
  0x39, 0x6e, 0x62, 0x33, 0x52, 0x68, 0x4d, 0x51, 0x38, 0x77, 0x44, 0x51, 0x59,
  0x44, 0x56, 0x51, 0x51, 0x48, 0x44, 0x41, 0x5a, 0x43, 0x62, 0x32, 0x64, 0x76,
  0x64, 0x47, 0x45, 0x78, 0x45, 0x54, 0x41, 0x50, 0x42, 0x67, 0x4e, 0x56, 0x0a,
  0x42, 0x41, 0x6f, 0x4d, 0x43, 0x46, 0x56, 0x75, 0x61, 0x57, 0x46, 0x75, 0x5a,
  0x47, 0x56, 0x7a, 0x4d, 0x51, 0x38, 0x77, 0x44, 0x51, 0x59, 0x44, 0x56, 0x51,
  0x51, 0x4c, 0x44, 0x41, 0x5a, 0x44, 0x59, 0x57, 0x35, 0x6b, 0x59, 0x58, 0x67,
  0x78, 0x45, 0x6a, 0x41, 0x51, 0x42, 0x67, 0x4e, 0x56, 0x42, 0x41, 0x4d, 0x4d,
  0x43, 0x55, 0x46, 0x79, 0x63, 0x58, 0x56, 0x70, 0x63, 0x32, 0x39, 0x6d, 0x0a,
  0x64, 0x44, 0x45, 0x71, 0x4d, 0x43, 0x67, 0x47, 0x43, 0x53, 0x71, 0x47, 0x53,
  0x49, 0x62, 0x33, 0x44, 0x51, 0x45, 0x4a, 0x41, 0x52, 0x59, 0x62, 0x5a, 0x58,
  0x4e, 0x30, 0x64, 0x57, 0x52, 0x70, 0x59, 0x57, 0x35, 0x30, 0x5a, 0x58, 0x4e,
  0x41, 0x64, 0x57, 0x35, 0x70, 0x59, 0x57, 0x35, 0x6b, 0x5a, 0x58, 0x4d, 0x75,
  0x5a, 0x57, 0x52, 0x31, 0x4c, 0x6d, 0x4e, 0x76, 0x4d, 0x42, 0x34, 0x58, 0x0a,
  0x44, 0x54, 0x45, 0x34, 0x4d, 0x44, 0x55, 0x77, 0x4e, 0x54, 0x41, 0x31, 0x4d,
  0x7a, 0x59, 0x31, 0x4d, 0x6c, 0x6f, 0x58, 0x44, 0x54, 0x49, 0x34, 0x4d, 0x44,
  0x55, 0x77, 0x4d, 0x6a, 0x41, 0x31, 0x4d, 0x7a, 0x59, 0x31, 0x4d, 0x6c, 0x6f,
  0x77, 0x67, 0x5a, 0x4d, 0x78, 0x43, 0x7a, 0x41, 0x4a, 0x42, 0x67, 0x4e, 0x56,
  0x42, 0x41, 0x59, 0x54, 0x41, 0x6b, 0x4e, 0x50, 0x4d, 0x51, 0x38, 0x77, 0x0a,
  0x44, 0x51, 0x59, 0x44, 0x56, 0x51, 0x51, 0x49, 0x44, 0x41, 0x5a, 0x43, 0x62,
  0x32, 0x64, 0x76, 0x64, 0x47, 0x45, 0x78, 0x44, 0x7a, 0x41, 0x4e, 0x42, 0x67,
  0x4e, 0x56, 0x42, 0x41, 0x63, 0x4d, 0x42, 0x6b, 0x4a, 0x76, 0x5a, 0x32, 0x39,
  0x30, 0x59, 0x54, 0x45, 0x52, 0x4d, 0x41, 0x38, 0x47, 0x41, 0x31, 0x55, 0x45,
  0x43, 0x67, 0x77, 0x49, 0x56, 0x57, 0x35, 0x70, 0x59, 0x57, 0x35, 0x6b, 0x0a,
  0x5a, 0x58, 0x4d, 0x78, 0x44, 0x7a, 0x41, 0x4e, 0x42, 0x67, 0x4e, 0x56, 0x42,
  0x41, 0x73, 0x4d, 0x42, 0x6b, 0x4e, 0x68, 0x62, 0x6d, 0x52, 0x68, 0x65, 0x44,
  0x45, 0x53, 0x4d, 0x42, 0x41, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x77, 0x77,
  0x4a, 0x51, 0x58, 0x4a, 0x78, 0x64, 0x57, 0x6c, 0x7a, 0x62, 0x32, 0x5a, 0x30,
  0x4d, 0x53, 0x6f, 0x77, 0x4b, 0x41, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x0a,
  0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x6b, 0x42, 0x46, 0x68, 0x74, 0x6c, 0x63,
  0x33, 0x52, 0x31, 0x5a, 0x47, 0x6c, 0x68, 0x62, 0x6e, 0x52, 0x6c, 0x63, 0x30,
  0x42, 0x31, 0x62, 0x6d, 0x6c, 0x68, 0x62, 0x6d, 0x52, 0x6c, 0x63, 0x79, 0x35,
  0x6c, 0x5a, 0x48, 0x55, 0x75, 0x59, 0x32, 0x38, 0x77, 0x67, 0x67, 0x45, 0x69,
  0x4d, 0x41, 0x30, 0x47, 0x43, 0x53, 0x71, 0x47, 0x53, 0x49, 0x62, 0x33, 0x0a,
  0x44, 0x51, 0x45, 0x42, 0x41, 0x51, 0x55, 0x41, 0x41, 0x34, 0x49, 0x42, 0x44,
  0x77, 0x41, 0x77, 0x67, 0x67, 0x45, 0x4b, 0x41, 0x6f, 0x49, 0x42, 0x41, 0x51,
  0x44, 0x67, 0x4d, 0x71, 0x4f, 0x7a, 0x2f, 0x43, 0x64, 0x4f, 0x68, 0x58, 0x6b,
  0x31, 0x77, 0x2f, 0x73, 0x32, 0x6a, 0x7a, 0x7a, 0x4b, 0x46, 0x37, 0x67, 0x4d,
  0x66, 0x66, 0x44, 0x41, 0x67, 0x4c, 0x47, 0x6b, 0x55, 0x48, 0x4d, 0x6d, 0x0a,
  0x67, 0x64, 0x52, 0x4d, 0x4a, 0x66, 0x77, 0x73, 0x5a, 0x51, 0x32, 0x4a, 0x2f,
  0x61, 0x32, 0x55, 0x39, 0x2f, 0x6d, 0x61, 0x36, 0x62, 0x33, 0x59, 0x4b, 0x4a,
  0x36, 0x6f, 0x7a, 0x39, 0x70, 0x72, 0x51, 0x50, 0x52, 0x51, 0x62, 0x37, 0x46,
  0x42, 0x4e, 0x72, 0x76, 0x6d, 0x54, 0x4a, 0x45, 0x2b, 0x4b, 0x4c, 0x6e, 0x63,
  0x5a, 0x43, 0x4d, 0x65, 0x33, 0x64, 0x6c, 0x66, 0x43, 0x54, 0x41, 0x39, 0x0a,
  0x71, 0x63, 0x2b, 0x35, 0x36, 0x77, 0x63, 0x79, 0x2f, 0x62, 0x6d, 0x4e, 0x62,
  0x4d, 0x6e, 0x74, 0x54, 0x4f, 0x38, 0x54, 0x63, 0x69, 0x46, 0x61, 0x7a, 0x77,
  0x43, 0x33, 0x74, 0x41, 0x56, 0x36, 0x76, 0x36, 0x58, 0x6e, 0x42, 0x32, 0x79,
  0x49, 0x4e, 0x37, 0x6b, 0x6b, 0x68, 0x37, 0x45, 0x6a, 0x38, 0x33, 0x69, 0x4f,
  0x79, 0x32, 0x32, 0x68, 0x41, 0x66, 0x39, 0x74, 0x67, 0x70, 0x76, 0x51, 0x0a,
  0x38, 0x64, 0x41, 0x58, 0x43, 0x79, 0x4c, 0x78, 0x71, 0x41, 0x50, 0x71, 0x66,
  0x64, 0x2b, 0x49, 0x47, 0x4c, 0x63, 0x37, 0x55, 0x30, 0x7a, 0x7a, 0x2f, 0x6a,
  0x68, 0x6d, 0x72, 0x64, 0x67, 0x58, 0x45, 0x51, 0x32, 0x38, 0x72, 0x56, 0x56,
  0x48, 0x49, 0x73, 0x4e, 0x6b, 0x72, 0x53, 0x41, 0x78, 0x74, 0x5a, 0x57, 0x4a,
  0x4c, 0x63, 0x6e, 0x76, 0x76, 0x71, 0x6b, 0x33, 0x78, 0x45, 0x6c, 0x6e, 0x0a,
  0x33, 0x73, 0x6c, 0x47, 0x78, 0x6b, 0x42, 0x71, 0x53, 0x78, 0x6f, 0x57, 0x70,
  0x2f, 0x63, 0x39, 0x38, 0x46, 0x4d, 0x43, 0x71, 0x4e, 0x62, 0x58, 0x36, 0x61,
  0x65, 0x70, 0x35, 0x69, 0x74, 0x77, 0x45, 0x2b, 0x53, 0x35, 0x43, 0x47, 0x37,
  0x2b, 0x54, 0x6c, 0x7a, 0x7a, 0x55, 0x76, 0x34, 0x42, 0x77, 0x59, 0x70, 0x38,
  0x74, 0x6f, 0x65, 0x43, 0x61, 0x30, 0x6e, 0x7a, 0x62, 0x56, 0x35, 0x59, 0x0a,
  0x62, 0x52, 0x43, 0x72, 0x38, 0x4a, 0x50, 0x2b, 0x6f, 0x65, 0x66, 0x78, 0x51,
  0x64, 0x59, 0x30, 0x6a, 0x52, 0x36, 0x54, 0x35, 0x77, 0x4b, 0x4a, 0x61, 0x64,
  0x49, 0x55, 0x53, 0x62, 0x59, 0x67, 0x79, 0x77, 0x65, 0x63, 0x45, 0x64, 0x38,
  0x44, 0x2f, 0x44, 0x30, 0x77, 0x73, 0x54, 0x37, 0x68, 0x41, 0x67, 0x4d, 0x42,
  0x41, 0x41, 0x47, 0x6a, 0x55, 0x44, 0x42, 0x4f, 0x4d, 0x42, 0x30, 0x47, 0x0a,
  0x41, 0x31, 0x55, 0x64, 0x44, 0x67, 0x51, 0x57, 0x42, 0x42, 0x51, 0x4a, 0x33,
  0x33, 0x48, 0x71, 0x61, 0x50, 0x37, 0x53, 0x38, 0x79, 0x61, 0x72, 0x2f, 0x78,
  0x2b, 0x58, 0x33, 0x76, 0x53, 0x48, 0x4d, 0x56, 0x70, 0x4e, 0x55, 0x6a, 0x41,
  0x66, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x53, 0x4d, 0x45, 0x47, 0x44, 0x41, 0x57,
  0x67, 0x42, 0x51, 0x4a, 0x33, 0x33, 0x48, 0x71, 0x61, 0x50, 0x37, 0x53, 0x0a,
  0x38, 0x79, 0x61, 0x72, 0x2f, 0x78, 0x2b, 0x58, 0x33, 0x76, 0x53, 0x48, 0x4d,
  0x56, 0x70, 0x4e, 0x55, 0x6a, 0x41, 0x4d, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x52,
  0x4d, 0x45, 0x42, 0x54, 0x41, 0x44, 0x41, 0x51, 0x48, 0x2f, 0x4d, 0x41, 0x30,
  0x47, 0x43, 0x53, 0x71, 0x47, 0x53, 0x49, 0x62, 0x33, 0x44, 0x51, 0x45, 0x42,
  0x43, 0x77, 0x55, 0x41, 0x41, 0x34, 0x49, 0x42, 0x41, 0x51, 0x43, 0x2b, 0x0a,
  0x55, 0x30, 0x58, 0x68, 0x43, 0x49, 0x4b, 0x5a, 0x64, 0x6b, 0x4b, 0x67, 0x32,
  0x74, 0x4c, 0x56, 0x31, 0x69, 0x42, 0x70, 0x78, 0x66, 0x71, 0x2f, 0x34, 0x52,
  0x69, 0x77, 0x32, 0x6f, 0x4b, 0x72, 0x35, 0x6c, 0x6f, 0x4e, 0x79, 0x7a, 0x5a,
  0x6a, 0x4f, 0x48, 0x72, 0x41, 0x56, 0x67, 0x50, 0x42, 0x69, 0x58, 0x57, 0x4b,
  0x47, 0x41, 0x75, 0x36, 0x54, 0x50, 0x69, 0x6c, 0x57, 0x30, 0x47, 0x5a, 0x0a,
  0x4b, 0x67, 0x71, 0x74, 0x48, 0x73, 0x79, 0x50, 0x62, 0x51, 0x38, 0x61, 0x36,
  0x38, 0x62, 0x64, 0x4c, 0x68, 0x67, 0x4f, 0x66, 0x46, 0x36, 0x4a, 0x49, 0x79,
  0x43, 0x36, 0x63, 0x66, 0x43, 0x62, 0x42, 0x62, 0x4a, 0x37, 0x62, 0x4b, 0x77,
  0x53, 0x75, 0x4a, 0x4a, 0x77, 0x33, 0x6a, 0x58, 0x32, 0x2b, 0x51, 0x34, 0x75,
  0x48, 0x70, 0x68, 0x41, 0x31, 0x72, 0x5a, 0x38, 0x6a, 0x54, 0x55, 0x46, 0x0a,
  0x56, 0x52, 0x32, 0x76, 0x50, 0x46, 0x6a, 0x36, 0x35, 0x62, 0x42, 0x5a, 0x58,
  0x37, 0x57, 0x7a, 0x36, 0x55, 0x51, 0x4d, 0x69, 0x41, 0x4c, 0x73, 0x54, 0x76,
  0x6a, 0x48, 0x4f, 0x70, 0x65, 0x51, 0x6a, 0x79, 0x39, 0x72, 0x73, 0x48, 0x75,
  0x53, 0x70, 0x41, 0x74, 0x4e, 0x76, 0x59, 0x72, 0x54, 0x68, 0x2f, 0x2b, 0x2f,
  0x50, 0x2b, 0x4f, 0x47, 0x43, 0x57, 0x77, 0x71, 0x32, 0x6d, 0x4d, 0x35, 0x0a,
  0x39, 0x38, 0x59, 0x51, 0x50, 0x4b, 0x56, 0x58, 0x4c, 0x68, 0x75, 0x64, 0x7a,
  0x30, 0x65, 0x69, 0x33, 0x6d, 0x2f, 0x6e, 0x65, 0x52, 0x69, 0x5a, 0x58, 0x56,
  0x35, 0x6a, 0x58, 0x72, 0x69, 0x37, 0x6e, 0x6b, 0x62, 0x39, 0x51, 0x34, 0x45,
  0x46, 0x79, 0x77, 0x48, 0x35, 0x4f, 0x2f, 0x6f, 0x32, 0x2f, 0x37, 0x62, 0x69,
  0x7a, 0x53, 0x49, 0x53, 0x79, 0x63, 0x7a, 0x73, 0x39, 0x31, 0x68, 0x56, 0x0a,
  0x70, 0x68, 0x33, 0x4f, 0x55, 0x41, 0x57, 0x6a, 0x51, 0x44, 0x6e, 0x30, 0x42,
  0x4c, 0x34, 0x78, 0x4e, 0x46, 0x56, 0x49, 0x59, 0x7a, 0x44, 0x53, 0x2f, 0x6c,
  0x4b, 0x44, 0x53, 0x41, 0x5a, 0x74, 0x70, 0x36, 0x74, 0x6f, 0x44, 0x4f, 0x31,
  0x55, 0x33, 0x73, 0x56, 0x6d, 0x6a, 0x5a, 0x58, 0x48, 0x59, 0x44, 0x54, 0x62,
  0x53, 0x68, 0x2f, 0x2b, 0x4d, 0x2f, 0x6a, 0x78, 0x34, 0x72, 0x66, 0x4b, 0x0a,
  0x47, 0x65, 0x50, 0x6f, 0x75, 0x36, 0x34, 0x34, 0x71, 0x47, 0x5a, 0x73, 0x32,
  0x76, 0x55, 0x47, 0x66, 0x76, 0x33, 0x47
};

unsigned int m2mqtt_ca_bin_crt_len = 1027;

IPAddress serverMQTT (192,168,0,10);
const uint16_t portMQTT = 8083;
const char* usernameMQTT = "microcontrolador";
const char* passwordMQTT = "Isis2503";

void connectWIFI() {
  // Conectar a la red WiFi
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  if(WiFi.status() != WL_CONNECTED) {
    WiFi.begin(ssid, password);
  }

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println(WiFi.localIP());
}

void reconnectWIFI() {
  // Conectar a la red WiFi
  if(WiFi.status() != WL_CONNECTED) {
    WiFi.begin(ssid, password);
  }

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
  }
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.write(payload, length);
  Serial.println();
}

void setup() {
  Serial.begin(9600);
  inputString.reserve(100);
  clientWIFI.setCACert(m2mqtt_ca_bin_crt, m2mqtt_ca_bin_crt_len);
  clientMQTT.setServer(serverMQTT, portMQTT);
  clientMQTT.setCallback(callback);
  connectWIFI();
  delay(1000);
}

void processData() {
  if (WiFi.status() == WL_CONNECTED) {
    if(init_flag == false) {
      init_flag = true;

      boolean conectMQTT = false;
      if (!clientMQTT.connected()) {
        // if (!clientMQTT.connect(idDevice, usernameMQTT, passwordMQTT)) {
        if (!clientMQTT.connect(idDevice, usernameMQTT, passwordMQTT)) {
          conectMQTT = false;
        }
        conectMQTT = true;
      }
      else {
        conectMQTT = true;
      }

      if(conectMQTT) {
        if(clientMQTT.subscribe(TOPIC_SUBSCRIBE)) {
          // Serial.println("Subscribe OK");
        }
      }
    }

    if (stringComplete && clientMQTT.connected()) {
      if(clientMQTT.publish(TOPIC_PUBLISH, bufferData)) {
        inputString = "";
        stringComplete = false;
      }
      init_flag = false;
    }
  }
  else {
    connectWIFI();
    init_flag = false;
  }
  clientMQTT.loop();
}

void receiveData() {
  while (Serial.available()) {
    // get the new byte:
    char inChar = (char)Serial.read();
    // add it to the inputString:
    inputString += inChar;
    // if the incoming character is a newline, set a flag
    // so the main loop can do something about it:
    if (inChar == '\n') {
      inputString.toCharArray(bufferData, SIZE_BUFFER_DATA);
      stringComplete = true;
    }
  }
}

void loop() {
  receiveData();
  processData();
}
